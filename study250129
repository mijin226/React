* 아키텍처 패턴(=아키텍처 스타일, 표준 아키텍처)

1. 아키텍처 패턴의 개요
 - 아키텍처 설계 시 참조할 수 있는 해결방식 및 예제
 - 소프트웨어 시스템 구조 구성 위한 기본적인 윤곽 제시
 - 서비시스템들과 그들의 역할이 정의됨. 규칙, 지침 포괄

 
 1) 아키텍처 패턴의 장점
  - 시행착오 시간의 감소/개발시간 감축
  - 고품질의 소프트웨어 생산 가능
  - 검증된 구조 기반의 개발에 따른 안정성 확보
  - 이해관계자들의 공통의 아키텍처 기반의 의사소통에 따른 간편성
  - 시스템 구조 이해의 간편성. 개발 미참여인의 유지보수성 용이
  - 개발 전 시스템의 특성 예측 용이


  
 2) 아키텍처 패턴 종류
  - 레이어패턴
  - 클라이언트-서버 패턴
  - 파이프-필터 패턴
  - MVC 패턴

  
  (1) 레이어 패턴(Layers pattern)
   - 시스템을 계층(레이어)으로 구분 해 구성하는 고전적인 방법 ( 특정 계층만을 교체하여 시스템 개선)                                                   레이어 N        ↑ 클라이언트
   - 각각 서브시스템들이 계층 구조를 이뤄 하위 계층은 상위 계층에 대한 서비스 제공자/상위계층은 하위 계층의 클라이언트.                                 레이어 N-1      ↓ 서비스 제공자 
   - 서로 마주보는 두 개 계층 사이에서만 상호작용 발생                                                                                               ：
   - 변경 시에도 마주보는 두 개의 계층에서만 영향력이 미치므로 유지보수/변경에 용이                                                                  레이어2         ↑ 클라이언트
                                                                                                                                               레이어1         ↓ 서비스 제공자
                                                                                                                                               
  (2) 클라이언트-서버 패턴(Client-Server Pattern)
   - 하나의 서버 컴포넌트와 다수의 클라이언트 컴포넌트로 구성
   - 사용자는 클라이언트와만 의사소통 진행
   - 서버 클라이언트 요청에 항상 대기 상태 유지
   - 클라이언트/서버의 경우, 응답 동기화 제외하곤 독립적
   - 사용자_요청값 → 클라이언트_서버전달 → 서버_요청수리 → 클라이언트_서버응답 전달 → 사용자_응답값

   
  (3) 파이프-필터 패턴(Pipe - Filter Pattern)
   - 


  
