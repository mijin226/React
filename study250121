* React 개념 정리
 - 사용자 인터페이스 만들기 위한  JavaScript 라이브러리(웹 개발 라이브러리)
 - 프레임워크가 아닌 라이브러리.
  (프레임워크 : 개발 위한 기본 틀, 뼈대 / 라이브러리 : 개발에 필요한 도구, 집합 전체)

 1) 리액트 사용 이유?
  - 현재 시장의 트렌드. 수요가 많음
  - 편리함
  - SPA방식으로 웹을 만들고, 화면을 여러 단위로 쪼개고 재사용이 가능해 코드관리 용이.
  - 방대한 생태계 특성상, 유용한 라이브러리 존재.

 2) 리액트가 트렌드 될 수 있었던 이유?
  - 리액트 전 일반적인 웹사이트 -> A웹사이트 들어갔을 때, 브라우저는 웹 서버에 A페이지와 관련된 리소스 다운로드함.
    여기에는 HTML, JS, CSS 포함되어 있을 것.
    특정 링크 통해 B페이지 이동 시, 브라우저는 웹서버에서 B페이지 리소스 다운로드 할 것.
    모든 페이지 진입 때마다, 서버에서 관련 페이지 리소스 다운로드 하는 것.
    광범위 서비스의 경우, 반복적 리소스 사용이 발생함.
    그래서 전통적 웹서비스 방식 문제 해결 위해 SPA 방식 생겨남.
    서버에서 HTML 만들고 그걸 내려줬던 반면,
    SPA에서는 서버에서 AB 리소스 모두 받고, 브라우저에서 동적으로 화면을 그림.
    자바 스크립트 통해 현재 페이지에 HTML 생성하는 방식.

    A페이지에서는 B페이지 이동할 때, 이미 받았던 리소스로 B페이지 생성함.
    새로고침이 아닌, 자바스크립트에 의해, 화면 콘텐츠만 변화되어, 싱글페이지 어플리케이션라 불림.

    이런 SPA방식 대표 프레임워크 : 리액트(2013~), 뷰(2016~), 앵귤러2(2016~)
    * 앵귤러1(2010~)이때는 SPA방식 아니었음.
    점점 리액트 관심 증가하게 됨.  

 3) 리액트 특징
  - 컴포넌트 기반 설계
  - 가상 돔(dom)

  (1) 컴포넌트 기반 설계
   - 컴포넌트 : 스스로 상태 관리하는 캡슐화된 코드 조각.
   - 웹 페이지 구성 요소 하나하나를 컴포넌트라 보기 가능. 
   - 컴포넌트 : 의미단위 구성 및 한 번 만들면 재사용성, 유지보수성 증가함.
   - 컴포넌트 : 부모-자식관계 가짐. (ex. 최상위 PAGE 컴포넌트는 헤더, 배너, 섹션을 자식으로 포함함.)

  (2) 가상 돔(dom)
   - 실제 돔의 복사본.
   - SPA에서는 동적 변화를 효율적 관리하기 위해 사용함.
   - 자바스크립 활용해 HTML 동적 변경할 때, 돔 재구축 및 화면 그리는 과정 이뤄짐.
   - 이 과정은 상대적으로 느려서 잦은 돔 변경은 웹서비스 성능 문제 야기하게 됨.
   - 그래서 가상 돔 하나 만들어 변경되어야 할 돔 요소를 가상 돔에서 미리 변경해두고, 돔을 동기화 하는 형태로 변경

  (3) 기타
   - 리액트는 client side rendering 방식(spa방식)
   - 자바스크립트 통해 서버 아닌 브라우저에서 화면 렌더링함.
   - 리액트 풍부한 생태계 지님
   - 리액트 네이티브같은 라이브러리 존재??
